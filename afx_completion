#!/usr/bin/env bash
#
# afx Bash Completion
# =======================
#
# Bash completion support for the `afx` command,
# generated by [picocli](https://picocli.info/) version 4.7.7.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `afx [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'afx (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# compReplyArray generates a list of completion suggestions based on an array, ensuring all values are properly escaped.
#
# compReplyArray takes a single parameter: the array of options to be displayed
#
# The output is echoed to std_out, one option per line.
#
# Example usage:
# local options=("foo", "bar", "baz")
# local IFS=$'\n'
# COMPREPLY=($(compReplyArray "${options[@]}"))
function compReplyArray() {
  declare -a options
  options=("$@")
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local i
  local quoted
  local optionList=()

  for (( i=0; i<${#options[@]}; i++ )); do
    # Double escape, since we want escaped values, but compgen -W expands the argument
    printf -v quoted %q "${options[i]}"
    quoted=\'${quoted//\'/\'\\\'\'}\'

    optionList[i]=$quoted
  done

  # We also have to add another round of escaping to $curr_word.
  curr_word=${curr_word//\\/\\\\}
  curr_word=${curr_word//\'/\\\'}

  # Actually generate completions.
  local IFS=$'\n'
  echo -e "$(compgen -W "${optionList[*]}" -- "$curr_word")"
}

# Bash completion entry point function.
# _complete_afx finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_afx() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get" ];    then _picocli_afx; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config" ];    then _picocli_afx; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} describe" ];    then _picocli_afx; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} trigger" ];    then _picocli_afx; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} modify" ];    then _picocli_afx; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get dag" ];    then _picocli_afx_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get dags" ];    then _picocli_afx_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get run" ];    then _picocli_afx_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get runs" ];    then _picocli_afx_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get stats" ];    then _picocli_afx_get; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config set-context" ];    then _picocli_afx_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config get-contexts" ];    then _picocli_afx_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config current-context" ];    then _picocli_afx_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config use-context" ];    then _picocli_afx_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config remove-context" ];    then _picocli_afx_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} describe dag" ];    then _picocli_afx_describe; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} trigger dag" ];    then _picocli_afx_trigger; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} modify run" ];    then _picocli_afx_modify; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(get)
  local cmds1=(config)
  local cmds2=(describe)
  local cmds3=(trigger)
  local cmds4=(modify)
  local cmds5=(get dag)
  local cmds6=(get dags)
  local cmds7=(get run)
  local cmds8=(get runs)
  local cmds9=(get stats)
  local cmds10=(config set-context)
  local cmds11=(config get-contexts)
  local cmds12=(config current-context)
  local cmds13=(config use-context)
  local cmds14=(config remove-context)
  local cmds15=(describe dag)
  local cmds16=(trigger dag)
  local cmds17=(modify run)

  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_afx_modify_run; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_afx_trigger_dag; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_afx_describe_dag; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_afx_config_removecontext; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_afx_config_usecontext; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_afx_config_currentcontext; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_afx_config_getcontexts; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_afx_config_setcontext; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_afx_get_stats; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_afx_get_runs; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_afx_get_run; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_afx_get_dags; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_afx_get_dag; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_afx_modify; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_afx_trigger; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_afx_describe; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_afx_config; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_afx_get; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_afx; return $?;
}

# Generates completions for the options and subcommands of the `afx` command.
function _picocli_afx() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="get config describe trigger modify"
  local flag_opts="'-h' '--help' '-V' '--version'"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_afx_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="dag dags run runs stats"
  local flag_opts="'-h' '--help'"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `config` subcommand.
function _picocli_afx_config() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="set-context get-contexts current-context use-context remove-context"
  local flag_opts="'-h' '--help'"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `describe` subcommand.
function _picocli_afx_describe() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="dag"
  local flag_opts="'-h' '--help'"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `trigger` subcommand.
function _picocli_afx_trigger() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="dag"
  local flag_opts="'-h' '--help'"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `modify` subcommand.
function _picocli_afx_modify() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="run"
  local flag_opts="'-h' '--help'"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `dag` subcommand.
function _picocli_afx_get_dag() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-h' '--help' '--only-active' '--paused'"
  local arg_opts="'--pattern-string'"
  local dagIdPatternString_option_args=(`afx dag-ids-completion`) # --pattern-string values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--pattern-string')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${dagIdPatternString_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `dags` subcommand.
function _picocli_afx_get_dags() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-h' '--help' '--only-active' '--paused'"
  local arg_opts="'--pattern-string'"
  local dagIdPatternString_option_args=(`afx dag-ids-completion`) # --pattern-string values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--pattern-string')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${dagIdPatternString_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_afx_get_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-h' '--help' '--sort-reverse'"
  local arg_opts="'--limit' '--state'"
  local dagRunStateList_option_args=("queued" "running" "success" "failed") # --state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--limit')
      return
      ;;
    '--state')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${dagRunStateList_option_args[@]}" ) )
      return $?
      ;;
  esac
  local dagId_pos_param_args=(`afx dag-ids-completion`) # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "run" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compReplyArray "${dagId_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `runs` subcommand.
function _picocli_afx_get_runs() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-h' '--help' '--sort-reverse'"
  local arg_opts="'--limit' '--state'"
  local dagRunStateList_option_args=("queued" "running" "success" "failed") # --state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--limit')
      return
      ;;
    '--state')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${dagRunStateList_option_args[@]}" ) )
      return $?
      ;;
  esac
  local dagId_pos_param_args=(`afx dag-ids-completion`) # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "runs" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compReplyArray "${dagId_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `stats` subcommand.
function _picocli_afx_get_stats() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="'-h' '--help' '--all'"
  local arg_opts=""
  local dagIdList_pos_param_args=(`afx dag-ids-completion`) # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "stats" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compReplyArray "${dagIdList_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set-context` subcommand.
function _picocli_afx_config_setcontext() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-h' '--help'"
  local arg_opts="'--password' '--server' '--username'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--password')
      return
      ;;
    '--server')
      return
      ;;
    '--username')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-contexts` subcommand.
function _picocli_afx_config_getcontexts() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="'-h' '--help'"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `current-context` subcommand.
function _picocli_afx_config_currentcontext() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="'-h' '--help'"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `use-context` subcommand.
function _picocli_afx_config_usecontext() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="'-h' '--help'"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove-context` subcommand.
function _picocli_afx_config_removecontext() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="'-h' '--help'"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `dag` subcommand.
function _picocli_afx_describe_dag() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="'-h' '--help' '-v' '--verbose'"
  local arg_opts=""
  local dagId_pos_param_args=(`afx dag-ids-completion`) # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "dag" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compReplyArray "${dagId_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `dag` subcommand.
function _picocli_afx_trigger_dag() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="'-h' '--help'"
  local arg_opts=""
  local dagId_pos_param_args=(`afx dag-ids-completion`) # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "dag" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compReplyArray "${dagId_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_afx_modify_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-h' '--help'"
  local arg_opts="'--state'"
  local modifyRunState_option_args=("success" "failed") # --state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--state')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${modifyRunState_option_args[@]}" ) )
      return $?
      ;;
  esac
  local dagId_pos_param_args=(`afx dag-ids-completion`) # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "run" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compReplyArray "${dagId_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `afx`, `afx.sh`, and `afx.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_afx` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_afx -o default afx afx.sh afx.bash
